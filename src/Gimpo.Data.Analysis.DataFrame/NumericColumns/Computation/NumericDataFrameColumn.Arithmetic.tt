<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)\NumericColumns\NumericTypesTemplate.ttinclude" #>
<#@ include file="$(ProjectDir)\ArithmeticTemplate.ttinclude" #>
// Generated from NumericDataFrameColumn.Arithmetic.tt. Do not modify directly

using System;
using System.Collections.Generic;
using Gimpo.Data.Primitives;

namespace Gimpo.Data.Analysis
{
    public abstract partial class NumericDataFrameColumn<T>
    {

         protected abstract DataFrameColumn Compute(NativeMemoryNullableVector<T> values, ArithmeticOperation operation, bool inPlace = false);
         
        #region IArithmeticOperationColumn implementation
<# foreach (OperationConfiguration operation in arithmeticOperationConfiguration) { #>
        public DataFrameColumn <#=operation.Name#>(DataFrameColumn column, bool inPlace = false)
        {            
            if (column is NumericDataFrameColumn<T> sameTypeColumn)
            {
                return Compute(sameTypeColumn._values, ArithmeticOperation.<#=operation.Name#>, inPlace);
            }
                                    
            if (column is INumericColumn numeric)
            {
                return numeric.AcceptNumericArithmeticVisitor(this, ArithmeticOperation.<#=operation.Name#>, inPlace);
            }

            throw new NotSupportedException();
        }

        public DataFrameColumn Reverse<#=operation.Name#>(DataFrameColumn column)
        {            
            if (column is INumericColumn numeric)
            {
                return numeric.AcceptReverseNumericArithmeticVisitor(this, ArithmeticOperation.<#=operation.Name#>);
            }

            throw new NotSupportedException();
        }

<# } #>
    #endregion

<# foreach (TypeConfiguration type in typeConfiguration) { #>
        DataFrameColumn INumericArithmeticVisitor.Visit(NativeMemoryNullableVector<<#=type.TypeName#>> values, ArithmeticOperation operation, bool inPlace)
        {
            NumericDataFrameColumn<T> result;
            switch (operation)
            {
<# foreach (OperationConfiguration operation in arithmeticOperationConfiguration) { #>
                case ArithmeticOperation.<#=operation.Name#>:
                    result = inPlace ? this : CreateNewColumn("<#=operation.Name#>", Length, true);
                    ArithmeticComputation.<#=operation.Name#>(_values, values, result._values);
                    return result;
 <# } #>

                default: throw new NotSupportedException();
            }
        }

        DataFrameColumn INumericArithmeticVisitor.ReverseVisit(NativeMemoryNullableVector<<#=type.TypeName#>> values, ArithmeticOperation operation)
        {
            NumericDataFrameColumn<T> result;
            switch (operation)
            {
<# foreach (OperationConfiguration operation in arithmeticOperationConfiguration) { #>
            case ArithmeticOperation.<#=operation.Name#>:
                    result = CreateNewColumn("<#=operation.Name#>", Length, true);
                    ArithmeticComputation.Reverse<#=operation.Name#>(values, _values, result._values);
                    return result;
 <# } #>

                default: throw new NotSupportedException();
            }
        }

<# } #>

    }
}
