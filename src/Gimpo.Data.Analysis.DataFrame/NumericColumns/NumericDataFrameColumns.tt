<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="NumericTypesTemplate.ttinclude" #>
<#@ include file="$(ProjectDir)\ArithmeticTemplate.ttinclude" #>
// Generated from NumericDataFrameColumns.tt. Do not modify directly

using System;
using System.Numerics;
using System.Collections.Generic;
using Gimpo.Data.Primitives;

namespace Gimpo.Data.Analysis
{
    public abstract partial class DataFrameColumn
    {
        internal static void RegisterAutoGeneratedNumericDataFrameColumns()
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            DataFrame.RegisterColumnFactory(typeof(<#=type.TypeName#>), new <#=type.ClassPrefix#>DataFrameColumn.ColumnFactory());
<# } #>
        }
    }
<# foreach (TypeConfiguration type in typeConfiguration) { #>

    public class <#=type.ClassPrefix#>DataFrameColumn : NumericDataFrameColumn<<#=type.TypeName#>>
    {        
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0, bool skipZeroClear = false) => new <#=type.ClassPrefix#>DataFrameColumn(columnName, length, skipZeroClear);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new <#=type.ClassPrefix#>DataFrameColumn(columnName, (IEnumerable<<#=type.TypeName#>>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new <#=type.ClassPrefix#>DataFrameColumn(columnName, (IEnumerable<<#=type.TypeName#>?>)values);
        }
        #endregion

        #region Constructors and Factory methods
               
        public <#=type.ClassPrefix#>DataFrameColumn(NumericDataFrameColumn<<#=type.TypeName#>> column) : base(column) {}

        public <#=type.ClassPrefix#>DataFrameColumn(NumericDataFrameColumn<<#=type.TypeName#>> column, IEnumerable<long> indicesMap) : base(column, indicesMap) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, long length, bool skipZeroClear = false) : base(name, length, skipZeroClear) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, IEnumerable<<#=type.TypeName#>> values) : base(name, values) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, IEnumerable<<#=type.TypeName#>?> values) : base(name, values) {}

        protected override NumericDataFrameColumn<<#=type.TypeName#>> CreateNewColumn(string name, long length = 0, bool skipZeroClear = false)
        {
            return new <#=type.ClassPrefix#>DataFrameColumn(name, length, skipZeroClear);
        }
        #endregion

        #region Numeric Arithmetic
        protected override DataFrameColumn Compute(NativeMemoryNullableVector<<#=type.TypeName#>> values, ArithmeticOperation operation, bool inPlace = false)
        {
            return ((INumericArithmeticVisitor)this).Visit(values, operation, inPlace);
        }

        protected override NumericArithmeticComputation<<#=type.TypeName#>> ArithmeticComputation
        {
            get
            {
                if (!Vector.IsHardwareAccelerated || DataFrame.ForceSimdCalculationsDisabled)
                    return new <#=type.ClassPrefix#>NumericArithmeticComputation();

                return new <#=type.ClassPrefix#>SimdNumericArithmeticComputation();
            }
        }
        
        public override bool IsArgumentTypeSupported(Type argumentType)
        {
<# foreach (string supportedType in type.SupportedTypes) { #>
            if (argumentType == typeof(<#=supportedType#>))
                return true;

<# } #>
            return false;
        }


        public override DataFrameColumn AcceptNumericArithmeticVisitor(INumericArithmeticVisitor visitor, ArithmeticOperation operation, bool inPlace = false) => visitor.Visit(_values, operation, inPlace);

        public override DataFrameColumn AcceptReverseNumericArithmeticVisitor(INumericArithmeticVisitor visitor, ArithmeticOperation operation) => visitor.ReverseVisit(_values, operation);


        #endregion

        #region Clone
        public new <#=type.ClassPrefix#>DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new <#=type.ClassPrefix#>DataFrameColumn(this);

            if (newColumnName != null)
                copy.Name = newColumnName;

            return copy;
        }

        public new <#=type.ClassPrefix#>DataFrameColumn Clone(IEnumerable<long> indicesMap, string newColumnName = null)
        {
            var copy = new <#=type.ClassPrefix#>DataFrameColumn(this, indicesMap);

            if (newColumnName != null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        protected override DataFrameColumn CloneImpl(IEnumerable<long> indicesMap, string newColumnName = null) => Clone(indicesMap, newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<<#=type.TypeName#>?>)((out <#=type.TypeName#>? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.<#=type.TypeId#>, typeof(<#=type.TypeName#>), true);
    }
<# } #>
}
