<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="PrimitiveDataFrameColumnsTemplate.ttinclude" #>
// Generated from PrimitiveDataFrameColumns.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Gimpo.Data.Analysis
{
    public abstract partial class DataFrameColumn
    {
        internal static void RegisterAutoGeneratedPrimitiveDataFrameColumns()
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            DataFrame.RegisterColumnFactory(typeof(<#=type.TypeName#>), new <#=type.ClassPrefix#>DataFrameColumn.ColumnFactory());
<# } #>
        }
    }
<# foreach (TypeConfiguration type in typeConfiguration) { #>

    public class <#=type.ClassPrefix#>DataFrameColumn : PrimitiveDataFrameColumn<<#=type.TypeName#>>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new <#=type.ClassPrefix#>DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new <#=type.ClassPrefix#>DataFrameColumn(columnName, (IEnumerable<<#=type.TypeName#>>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new <#=type.ClassPrefix#>DataFrameColumn(columnName, (IEnumerable<<#=type.TypeName#>?>)values);
        }
        #endregion

        #region Constructors
        public <#=type.ClassPrefix#>DataFrameColumn(PrimitiveDataFrameColumn<<#=type.TypeName#>> column) : base(column) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, long length) : base(name, length) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, IEnumerable<<#=type.TypeName#>> values) : base(name, values) {}

        public <#=type.ClassPrefix#>DataFrameColumn(string name, IEnumerable<<#=type.TypeName#>?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new <#=type.ClassPrefix#>DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new <#=type.ClassPrefix#>DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(RowCursor cursor) =>
            (ValueGetter<<#=type.TypeName#>?>)((out <#=type.TypeName#>? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.<#=type.TypeId#>, typeof(<#=type.TypeName#>), true);
    }
<# } #>
}
