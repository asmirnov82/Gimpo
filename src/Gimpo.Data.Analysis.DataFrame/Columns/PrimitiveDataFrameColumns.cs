
// Generated from PrimitiveDataFrameColumns.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Gimpo.Data.Analysis
{
    public abstract partial class DataFrameColumn
    {
        internal static void RegisterAutoGeneratedPrimitiveDataFrameColumns()
        {
            DataFrame.RegisterColumnFactory(typeof(double), new DoubleDataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(float), new FloatDataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(sbyte), new Int8DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(byte), new UInt8DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(short), new Int16DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(ushort), new UInt16DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(int), new Int32DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(uint), new UInt32DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(long), new Int64DataFrameColumn.ColumnFactory());
            DataFrame.RegisterColumnFactory(typeof(ulong), new UInt64DataFrameColumn.ColumnFactory());
        }
    }

    public class DoubleDataFrameColumn : PrimitiveDataFrameColumn<double>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new DoubleDataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new DoubleDataFrameColumn(columnName, (IEnumerable<double>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new DoubleDataFrameColumn(columnName, (IEnumerable<double?>)values);
        }
        #endregion

        #region Constructors
        public DoubleDataFrameColumn(PrimitiveDataFrameColumn<double> column) : base(column) {}

        public DoubleDataFrameColumn(string name, long length) : base(name, length) {}

        public DoubleDataFrameColumn(string name, IEnumerable<double> values) : base(name, values) {}

        public DoubleDataFrameColumn(string name, IEnumerable<double?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new DoubleDataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new DoubleDataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<double?>)((out double? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Double, typeof(double), true);
    }

    public class FloatDataFrameColumn : PrimitiveDataFrameColumn<float>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new FloatDataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new FloatDataFrameColumn(columnName, (IEnumerable<float>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new FloatDataFrameColumn(columnName, (IEnumerable<float?>)values);
        }
        #endregion

        #region Constructors
        public FloatDataFrameColumn(PrimitiveDataFrameColumn<float> column) : base(column) {}

        public FloatDataFrameColumn(string name, long length) : base(name, length) {}

        public FloatDataFrameColumn(string name, IEnumerable<float> values) : base(name, values) {}

        public FloatDataFrameColumn(string name, IEnumerable<float?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new FloatDataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new FloatDataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<float?>)((out float? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Float, typeof(float), true);
    }

    public class Int8DataFrameColumn : PrimitiveDataFrameColumn<sbyte>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new Int8DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new Int8DataFrameColumn(columnName, (IEnumerable<sbyte>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new Int8DataFrameColumn(columnName, (IEnumerable<sbyte?>)values);
        }
        #endregion

        #region Constructors
        public Int8DataFrameColumn(PrimitiveDataFrameColumn<sbyte> column) : base(column) {}

        public Int8DataFrameColumn(string name, long length) : base(name, length) {}

        public Int8DataFrameColumn(string name, IEnumerable<sbyte> values) : base(name, values) {}

        public Int8DataFrameColumn(string name, IEnumerable<sbyte?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new Int8DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new Int8DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<sbyte?>)((out sbyte? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Int8, typeof(sbyte), true);
    }

    public class UInt8DataFrameColumn : PrimitiveDataFrameColumn<byte>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new UInt8DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new UInt8DataFrameColumn(columnName, (IEnumerable<byte>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new UInt8DataFrameColumn(columnName, (IEnumerable<byte?>)values);
        }
        #endregion

        #region Constructors
        public UInt8DataFrameColumn(PrimitiveDataFrameColumn<byte> column) : base(column) {}

        public UInt8DataFrameColumn(string name, long length) : base(name, length) {}

        public UInt8DataFrameColumn(string name, IEnumerable<byte> values) : base(name, values) {}

        public UInt8DataFrameColumn(string name, IEnumerable<byte?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new UInt8DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new UInt8DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<byte?>)((out byte? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.UInt8, typeof(byte), true);
    }

    public class Int16DataFrameColumn : PrimitiveDataFrameColumn<short>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new Int16DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new Int16DataFrameColumn(columnName, (IEnumerable<short>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new Int16DataFrameColumn(columnName, (IEnumerable<short?>)values);
        }
        #endregion

        #region Constructors
        public Int16DataFrameColumn(PrimitiveDataFrameColumn<short> column) : base(column) {}

        public Int16DataFrameColumn(string name, long length) : base(name, length) {}

        public Int16DataFrameColumn(string name, IEnumerable<short> values) : base(name, values) {}

        public Int16DataFrameColumn(string name, IEnumerable<short?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new Int16DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new Int16DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<short?>)((out short? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Int16, typeof(short), true);
    }

    public class UInt16DataFrameColumn : PrimitiveDataFrameColumn<ushort>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new UInt16DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new UInt16DataFrameColumn(columnName, (IEnumerable<ushort>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new UInt16DataFrameColumn(columnName, (IEnumerable<ushort?>)values);
        }
        #endregion

        #region Constructors
        public UInt16DataFrameColumn(PrimitiveDataFrameColumn<ushort> column) : base(column) {}

        public UInt16DataFrameColumn(string name, long length) : base(name, length) {}

        public UInt16DataFrameColumn(string name, IEnumerable<ushort> values) : base(name, values) {}

        public UInt16DataFrameColumn(string name, IEnumerable<ushort?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new UInt16DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new UInt16DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<ushort?>)((out ushort? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.UInt16, typeof(ushort), true);
    }

    public class Int32DataFrameColumn : PrimitiveDataFrameColumn<int>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new Int32DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new Int32DataFrameColumn(columnName, (IEnumerable<int>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new Int32DataFrameColumn(columnName, (IEnumerable<int?>)values);
        }
        #endregion

        #region Constructors
        public Int32DataFrameColumn(PrimitiveDataFrameColumn<int> column) : base(column) {}

        public Int32DataFrameColumn(string name, long length) : base(name, length) {}

        public Int32DataFrameColumn(string name, IEnumerable<int> values) : base(name, values) {}

        public Int32DataFrameColumn(string name, IEnumerable<int?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new Int32DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new Int32DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<int?>)((out int? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Int32, typeof(int), true);
    }

    public class UInt32DataFrameColumn : PrimitiveDataFrameColumn<uint>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new UInt32DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new UInt32DataFrameColumn(columnName, (IEnumerable<uint>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new UInt32DataFrameColumn(columnName, (IEnumerable<uint?>)values);
        }
        #endregion

        #region Constructors
        public UInt32DataFrameColumn(PrimitiveDataFrameColumn<uint> column) : base(column) {}

        public UInt32DataFrameColumn(string name, long length) : base(name, length) {}

        public UInt32DataFrameColumn(string name, IEnumerable<uint> values) : base(name, values) {}

        public UInt32DataFrameColumn(string name, IEnumerable<uint?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new UInt32DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new UInt32DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<uint?>)((out uint? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.UInt32, typeof(uint), true);
    }

    public class Int64DataFrameColumn : PrimitiveDataFrameColumn<long>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new Int64DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new Int64DataFrameColumn(columnName, (IEnumerable<long>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new Int64DataFrameColumn(columnName, (IEnumerable<long?>)values);
        }
        #endregion

        #region Constructors
        public Int64DataFrameColumn(PrimitiveDataFrameColumn<long> column) : base(column) {}

        public Int64DataFrameColumn(string name, long length) : base(name, length) {}

        public Int64DataFrameColumn(string name, IEnumerable<long> values) : base(name, values) {}

        public Int64DataFrameColumn(string name, IEnumerable<long?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new Int64DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new Int64DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<long?>)((out long? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.Int64, typeof(long), true);
    }

    public class UInt64DataFrameColumn : PrimitiveDataFrameColumn<ulong>
    {
        #region Column Factory
        internal class ColumnFactory : IDataFrameColumnFactory
        {
            public DataFrameColumn CreateColumn(string columnName, long length = 0) => new UInt64DataFrameColumn(columnName, length);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T> values) => new UInt64DataFrameColumn(columnName, (IEnumerable<ulong>)values);
            public DataFrameColumn CreateColumn<T>(string columnName, IEnumerable<T?> values) where T : unmanaged
                => new UInt64DataFrameColumn(columnName, (IEnumerable<ulong?>)values);
        }
        #endregion

        #region Constructors
        public UInt64DataFrameColumn(PrimitiveDataFrameColumn<ulong> column) : base(column) {}

        public UInt64DataFrameColumn(string name, long length) : base(name, length) {}

        public UInt64DataFrameColumn(string name, IEnumerable<ulong> values) : base(name, values) {}

        public UInt64DataFrameColumn(string name, IEnumerable<ulong?> values) : base(name, values) {}
        #endregion

        #region Clone
        public new UInt64DataFrameColumn Clone(string newColumnName = null)
        {
            var copy = new UInt64DataFrameColumn(this);

            if (newColumnName == null)
                copy.Name = newColumnName;

            return copy;
        }

        protected override DataFrameColumn CloneImpl(string newColumnName = null) => Clone(newColumnName);
        #endregion

        public override Delegate GetValueGetter(IRowCursor cursor) =>
            (ValueGetter<ulong?>)((out ulong? value) => value = _values[cursor.Position]);

        public override DataType DataType => new DataType(TypeId.UInt64, typeof(ulong), true);
    }
}
