<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="NumericTypesTemplate.ttinclude" #>
// Generated from SimdNumericArithmeticComputations.tt. Do not modify directly

using System;
using System.Numerics;
using Gimpo.Data.Primitives;

namespace Gimpo.Data.Analysis
{
    #region Add    
<# foreach (TypeConfiguration type in typeConfiguration) { #>

    public class <#=type.ClassPrefix#>SimdNumericArithmeticComputation : NumericArithmeticComputation<<#=type.TypeName#>>
    {
<# foreach (string supportedType in type.SupportedTypes) { #>
        public override void Add(NativeMemoryNullableVector<<#=type.TypeName#>> left, NativeMemoryNullableVector<<#=supportedType#>> right, NativeMemoryNullableVector<<#=type.TypeName#>> result)
        {
            var i = SimdComputationsHelper.Compute((v1, v2) => v1 + v2, left, right, result);

            //Calculate validity (nulls)
            Bitmap.ElementWiseAndBitmap(left.GetValidityBitmap(), right.GetValidityBitmap(), result.GetValidityBitmap());
                            
            for (; i < left.Length; i++)
                result[i] = (<#=type.TypeName#>?)(left[i] + right[i]);
        }

<# } #>
    }
<# } #>
    #endregion
}
